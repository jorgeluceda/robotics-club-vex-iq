#pragma config(Sensor, port4,    gyroscope,      sensorVexIQ_Gyro)
#pragma config(Sensor, port7,    distanceSensor, sensorVexIQ_Distance)
#pragma config(Sensor, port8,    clawBumper,     sensorVexIQ_Touch)
#pragma config(Sensor, port9,    frontBumper,    sensorVexIQ_Touch)
#pragma config(Motor,  motor1,   rightMotor,     tmotorVexIQ, openLoop,   reversed, encoder)
#pragma config(Motor,  motor6,   leftMotor,      tmotorVexIQ, openLoop,   encoder)
#pragma config(Motor,  motor10,  armMotor,       tmotorVexIQ, PIDControl, encoder)
#pragma config(Motor,  motor11,  clawMotor,      tmotorVexIQ, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*------------------------------------------------------------------------------------------------
Move forward until the VEX IQ Distance Sensors sees an object 100 millimeters (mm) away. The VEX
IQ Distance Sensor returns values in millimeters.

ROBOT CONFIGURATION: VEX IQ Clawbot
MOTORS & SENSORS:
[I/O Port]          [Name]              [Type]                  [Info]
Port 7              distanceSensor      VEX IQ Distance         Distance Sensor (returns mm)
Port 1              rightMotor          VEX IQ Motor            Left side motor (reversed)
Port 6              leftMotor           VEX IQ Motor            Right side motor
------------------------------------------------------------------------------------------------*/
const int ACTUATOR_DELAY = 300; // in ms
const int SENSOR_DELAY = 100; // in ms
const int MAX_ARM_SPEED = 30;
const int MAX_CLAW_SPEED = 20;
const float MAX_CLAW_ANGLE = 65.0;
const float MAX_ARM_ANGLE = 180.0;
const float ARM_ENCODER_MULT = 4.0;

void setArmPosition(float targetPosition)
{
    if (targetPosition < 0.0)
    {
        targetPosition = 0.0;
    }
    else if (targetPosition > MAX_ARM_ANGLE)
    {
        targetPosition = MAX_ARM_ANGLE;
    }

    targetPosition *= ARM_ENCODER_MULT;
    float currPosition = getMotorEncoder(armMotor);
    moveMotorTarget(armMotor, targetPosition - currPosition, MAX_ARM_SPEED);
    waitUntilMotorStop(armMotor);
}

void resetArmPosition()
{
    if (getBumperValue(clawBumper) == 0)
    {
        setMotorSpeed(armMotor, -MAX_ARM_SPEED);
    }

    while (getBumperValue(clawBumper) == 0)
    {
        sleep(SENSOR_DELAY);
    }

    setMotorSpeed(armMotor, 0);
    resetMotorEncoder(armMotor);
}
